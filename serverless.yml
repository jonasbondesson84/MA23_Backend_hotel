# "org" ensures this Service is used with the correct Serverless Framework Access Key.
org: ${env:ORGANISATION}
# "app" enables Serverless Framework Dashboard features and sharing them with other Services.
app: hotel
# "service" is the name of this project. This will also be added to your AWS resource names.
service: hotel

provider:
  name: aws
  runtime: nodejs20.x
  profile: ${env:PROVIDER_PROFILE}
  region: eu-north-1
  iam:
    role: ${env:PROVIDER_IAM_ROLE}

plugins:
  - serverless-dotenv-plugin
  # - serverless-webpack

package:
  individually: true

build:
  esbuild: false


resources:
  Resources:
    hotelDB:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${env:RESOURCES_TABLENAME}
        AttributeDefinitions: 
          - AttributeName: id
            AttributeType: S
        KeySchema: 
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
  
    bookingsDB:
        Type: AWS::DynamoDB::Table
        Properties:
          TableName: 'rooms-db'
          AttributeDefinitions: 
            - AttributeName: id
              AttributeType: S
          KeySchema: 
            - AttributeName: id
              KeyType: HASH
          BillingMode: PAY_PER_REQUEST

  


functions:
  booking:
    handler: functions/booking/index.handler
    events:
      - httpApi:
          path: /booking
          method: post

  # confirmBooking:
  #   handler: functions/confirmBooking/confirmBooking.handler
  #   events:
  #     - httpApi:
  #         path: /booking/confirm
  #         method: get
  #         request:
  #         parameters:
  #         querystrings:
  #           bookingID: true

  # addRooms:
  #   handler: functions/rooms/index.handler
  #   events:
  #     - httpApi:
  #         path: /rooms/add
  #         method: post


  # getAllBookings:
  #   handler: functions/getAllBookings/index.handler
  #   events:
  #     - httpApi:
  #         path: /bookings
  #         method: get